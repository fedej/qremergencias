plugins {
    id 'org.springframework.boot' version '1.5.3.RELEASE'
    id 'java'
    id 'org.detoeuf.swagger-codegen' version '1.7.1'
}

bootRepackage {
    mainClass = 'ar.com.utn.proyecto.qremergencias.ws.QREmergenciasWsApplication'
}

def profiles = project.hasProperty('env')? project.env : "local"
dependencies {
    compile project(':qremergencias-core')

    compile group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.2.0'
    compile group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.7.0'
    compileOnly group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    if (profiles =~ ".*local.*") {
        compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'
    }
}

swagger {
    inputSpec = projectDir.toPath().resolve('src/main/resources/swagger.json').toFile()
    outputDir = buildDir.toPath().resolve('swagger').toFile()
    lang = 'java'

    additionalProperties = [
            'invokerPackage'   : 'ar.com.utn.proyecto.qremergencias.client',
            'apiPackage'       : 'ar.com.utn.proyecto.qremergencias.client.api',
            'modelPackage'     : 'ar.com.utn.proyecto.qremergencias.core.dto',
            'dateLibrary'      : 'java8',
            'library'          : 'retrofit2'
    ]

    // NO SPACES
    def models = ''

    systemProperties = [
            'apis' : '',
            //'models': models
    ]
}

def mainPackage = 'ar/com/utn/proyecto/qremergencias/ws'
def clientPackage = mainPackage + '/client/**'
def modelPackage = mainPackage + '/model/**'
checkstyleMain.exclude clientPackage, modelPackage
pmdMain.exclude clientPackage, modelPackage

idea.module.sourceDirs += file("build/swagger/src/main/java")
sourceSets.main.java.srcDirs += file('build/swagger/src/main/java')

task clientJar(type: Jar) {
    from(sourceSets.main.output) {
        include clientPackage, modelPackage
    }
    baseName += '-client'
}

task jar(type: Jar, overwrite: true) {
    from(sourceSets.main.output) {
        exclude mainPackage + '/client'
    }
    dependsOn 'clientJar'
}

build.dependsOn 'clientJar'
